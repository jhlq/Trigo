{{define "footer"}}
<footer class="footer">
	<small>
		Go is fun!
	</small>
	<nav>
		<ul>
			<li><a href="/">Home</a></li>
			<li><a href="/board/">Online board</a></li>
			<li><a href="/about/">About</a></li>
			<li><a href="/contact/">Contact</a></li>
		</ul>
	</nav>
</footer> 
{{end}}

{{define "boardCanvas"}}
	<input type="number" id="x" onchange="crosshair()" value=1>
	<input type="number" id="y" onchange="crosshair()" value=1>
	<br>
	<button onclick="sb.pass()">Pass.</button>
	<button onclick="sb.undo()">Undo.</button>
	<button onclick="sb.updateScore()">Score.</button>
	<button onclick="sb.reset()">Reset.</button>
	<br>
	<button onclick="sb.plotInfluence()">Plot influence.</button>
	<button onclick="sb.letAIPlay()">Let AI play!</button>
	<br>
	<canvas id="TriCanvas" width="600" height="540"></canvas>
	{{template "chat"}}
	<p id="scores"></p>
	<label for="shortcuts">Enable keyboard shortcuts (w a s d and e to enter): </label>
	<input type="checkbox" id="shortcuts">
	<br>
	
	<p>Canvas size: 
	<input type="number" id="canvassize" step="100" value=700>
	Side length: 
	<input type="number" id="sidelength" step="1" value=13>
	<button onclick="sb.changesize()">Change.</button>
	</p>
	
	<p>	Game record: <input type="text" id="board_moves" value='9;'> 
	<button class="btn btn-primary" onclick="sb.loadGame()">Load game record (paste first).</button> </p>
{{end}}

{{define "chat"}}
	<div id="chat">
		<div id="log"></div>
		<form id="form">
			<input type="text" id="msg" size="32"/>
			<input type="submit" value="Send" />
		</form>
	</div>
{{end}}

{{define "chatHeader"}}
<script type="text/javascript">
window.onload = function () {
		var conn;
		var msg = document.getElementById("msg");
		var log = document.getElementById("log");

		function appendLog(item) {
				var doScroll = log.scrollTop > log.scrollHeight - log.clientHeight - 1;
				log.appendChild(item);
				if (doScroll) {
						log.scrollTop = log.scrollHeight - log.clientHeight;
				}
		}

		document.getElementById("form").onsubmit = function () {
				if (!conn) {
						return false;
				}
				if (!msg.value) {
						return false;
				}
				conn.send(msg.value);
				msg.value = "";
				return false;
		};

		if (window["WebSocket"]) {
				conn = new WebSocket("ws://" + document.location.host + "/ws");
				conn.onclose = function (evt) {
						var item = document.createElement("div");
						item.innerHTML = "<b>Connection closed.</b>";
						appendLog(item);
				};
				conn.onmessage = function (evt) {
						var messages = evt.data.split('\n');
						for (var i = 0; i < messages.length; i++) {
								var item = document.createElement("div");
								item.innerText = messages[i];
								appendLog(item);
						}
				};
		} else {
				var item = document.createElement("div");
				item.innerHTML = "<b>Your browser does not support WebSockets.</b>";
				appendLog(item);
		}
};
</script>
<style type="text/css">
#chat {
	position: relative;
	display: block;
	float: right;
	width:30%; 
}
#log {
	background: lightblue;
	overflow: auto;
	height:500px; 
}
#form {
		overflow: auto;
}

</style>
{{end}}

{{define "board"}}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Trigo! Board {{.Key}}</title>
{{template "chatHeader"}}
</head>
<body>
	<h1>Trigo!</h1>
	<h2>Board {{.Key}}</h2>
	<p>Share the URL to let others edit the board.</p>
		
	{{template "boardCanvas"}}
	
	{{template "footer"}}

<script type="text/javascript" src="/javascript/trigolib.js"></script>
<script type="text/javascript" src="/javascript/screenboard.js"></script>

<script>
var sb=new Trigo.ScreenBoard("TriCanvas",9);
sb.drawGrid();
sb.setupWS("boards/{{.Key}}");
var ai=new Trigo.AI(sb.board);
sb.ai=ai;

document.body.addEventListener("keydown", keyDown, false);
function keyDown(e) {
	if (document.getElementById("shortcuts")==null || typeof(document.getElementById("shortcuts"))=="undefined"){
		document.removeEventListener("keydown", keyDown);
	} else if (document.getElementById("shortcuts").checked){
		var k = e.keyCode; //enter is 13
		if(k==83) { //s
			document.getElementById("y").value=parseInt(document.getElementById("y").value)+1;
			document.getElementById("x").value=parseInt(document.getElementById("x").value)-1;
		} else if (k==65){ //a
			document.getElementById("x").value=parseInt(document.getElementById("x").value)-1;
		} else if (k==80){ //p
			sb.plotInfluence();
			return;
		} else if (k==68){ //d
			document.getElementById("x").value=parseInt(document.getElementById("x").value)+1;
		} else if (k==69){ //e,	|| k==13 conflicts with enter for buttons
			var docx=parseInt(document.getElementById("x").value);
			var docy=parseInt(document.getElementById("y").value);
			sb.handleClick(docx,docy);
		} else if (k==87){ //w
			document.getElementById("y").value=parseInt(document.getElementById("y").value)-1;
			document.getElementById("x").value=parseInt(document.getElementById("x").value)+1;
		} else {
			return 0;
		}
		crosshair();
	}
}
function crosshair(){
	sb.placeMoves();
	var docx=parseInt(document.getElementById("x").value);
	var docy=parseInt(document.getElementById("y").value);
	if (sb.board.tg.has(docx,docy)){
		var st=sb.triangles[docy][docx];
		sb.drawer.line(st.pixX-sb.unitSize,st.pixY,st.pixX+sb.unitSize,st.pixY,"#909",5);
		sb.drawer.line(st.pixX,st.pixY-sb.unitSize,st.pixX,st.pixY+sb.unitSize,"#909",5);
	}
};

</script>
</body>
</html>
{{end}}

{{define "about"}}
<!DOCTYPE html>
<html lang='en'>
    <head>
        <meta charset='utf-8'>
        <title>Trigo! About</title>
    </head>
    <body>
        <header>
            <h1>About</h1>
        </header>
       <main>
		<p>Trigo is essentially the same as Go only played on a triangular grid. The default ruleset is a hybrid one where both stones and captures count as points. The ko rule is simple, the state of the board is not allowed to repeat.</p>
		
		<p>Why hybrid rules? Usually Japanese rules are used due to faster counting but Chinese rules are more robust, any disagreement can simply be played out whereas the Japanese ruleset implements special cases that arguably are flawed in the presence of unremovable ko threats. No doubt it is confusing why a group that can live via ko is considered dead when the other player can (potentially) remove all ko threats before starting the ko, removing all ko threats costs a lot of points so why is it just dead? The answer is because the hypothetical playout ("I can capture this, therefore it is dead") emulates Chinese rules where the ko threats can be removed at no cost. Players are used to get points for captures but China is really big so instead of choosing one let's merge them, give points for everything! A perk is that those long running 1 point kos at the end of the game mostly vanish.</p>

		<p>The project is open source and can be found at: <a href='https://github.com/jhlq/Trigo'>github.com/jhlq/Trigo</a></p>
        </main>
        
    {{template "footer"}}
    </body>
</html>
{{end}}

{{define "contact"}}
<!DOCTYPE html>
<html lang='en'>
    <head>
        <meta charset='utf-8'>
        <title>Trigo! Contact</title>
    </head>
    <body>
        <header>
            <h1>Contact</h1>
        </header>
        <main>
		<p>Please submit any issues you find to the github repository <a href='https://github.com/jhlq/Trigo'>github.com/jhlq/Trigo</a>. Thanks for your help!</p>
		<p>You can also reach out to me on my blog: <a href='https://jhlq.wordpress.com/'>jhlq.wordpress.com</a>. Or send an email to marcus.appelros at gmail dot com.</p>

        </main>
		{{template "footer"}}
    </body>
</html>
{{end}}

{{define "home"}}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Trigo!</title>
{{template "chatHeader"}}
</head>
<body>
	<h1>Trigo!</h1>
		
	{{template "boardCanvas"}}
	
	{{template "footer"}}

<script type="text/javascript" src="/javascript/trigolib.js"></script>
<script type="text/javascript" src="/javascript/screenboard.js"></script>

<script>
var sb=new Trigo.ScreenBoard("TriCanvas",9);
sb.drawGrid();
var ai=new Trigo.AI(sb.board);
sb.ai=ai;

document.body.addEventListener("keydown", keyDown, false);
function keyDown(e) {
	if (document.getElementById("shortcuts")==null || typeof(document.getElementById("shortcuts"))=="undefined"){
		document.removeEventListener("keydown", keyDown);
	} else if (document.getElementById("shortcuts").checked){		
		var k = e.keyCode; //enter is 13
		if(k==83) { //s
			document.getElementById("y").value=parseInt(document.getElementById("y").value)+1;
			document.getElementById("x").value=parseInt(document.getElementById("x").value)-1;
		} else if (k==65){ //a
			document.getElementById("x").value=parseInt(document.getElementById("x").value)-1;
		} else if (k==80){ //p
			sb.plotInfluence();
			return;
		} else if (k==68){ //d
			document.getElementById("x").value=parseInt(document.getElementById("x").value)+1;
		} else if (k==69){ //e,	|| k==13 conflicts with enter for buttons
			var docx=parseInt(document.getElementById("x").value);
			var docy=parseInt(document.getElementById("y").value);
			sb.handleClick(docx,docy);
		} else if (k==87){ //w
			document.getElementById("y").value=parseInt(document.getElementById("y").value)-1;
			document.getElementById("x").value=parseInt(document.getElementById("x").value)+1;
		} else {
			return 0;
		}
		crosshair();
	}
}
function crosshair(){
	sb.placeMoves();
	var docx=parseInt(document.getElementById("x").value);
	var docy=parseInt(document.getElementById("y").value);
	if (sb.board.tg.has(docx,docy)){
		var st=sb.triangles[docy][docx];
		sb.drawer.line(st.pixX-sb.unitSize,st.pixY,st.pixX+sb.unitSize,st.pixY,"#909",5);
		sb.drawer.line(st.pixX,st.pixY-sb.unitSize,st.pixX,st.pixY+sb.unitSize,"#909",5);
	}
};

</script>
</body>
</html>
{{end}}
