{{define "navlist"}}
	<nav>
		<ul>
			<li><a href="/">Home</a></li>
			<li><a href="/lobby/">Lobby</a></li>
			<li><a href="/board/">Online board</a></li>
			<li><a href="/about/">About</a></li>
			<li><a href="/contact/">Contact</a></li>
			<li><a href="/account/">Account</a></li>
		</ul>
	</nav>
{{end}}
{{define "nav"}}
<header>
	{{template "navlist"}}
</header> 
{{end}}
{{define "footer"}}
<footer class="footer">
	<p><small>
		Go is fun!
	</small></p>
	{{template "navlist"}}
</footer> 
{{end}}

{{define "boardCanvas"}}
	<p>
	<button onclick="sb.pass()">Pass.</button>
	<button onclick="sb.undo()">Undo.</button>
	<button onclick="sb.autoMarkDeadStones()">Mark dead stones.</button>
	<button onclick="sb.updateScore()">Score.</button>
	</p>
	<p>
	<button onclick="sb.estimateScore()">Estimate score.</button>
	<button onclick="sb.letAIPlay()">Let AI play!</button>
	<button onclick="sb.reset()">Reset.</button>
	</p>
	<canvas id="TriCanvas" width="600" height="540"></canvas>
	<p>Coordinate locator: <input type="number" id="x" onchange="crosshair()" value=1>
	<input type="number" id="y" onchange="crosshair()" value=1>
	</p>
	<p id="scores"></p>
	<p>Ruleset: 
	<select id="ruleset" onchange="var e=document.getElementById('ruleset');sb.board.ruleset=e.options[e.selectedIndex].value;">
	  <option value="Hybrid">Hybrid</option>
	  <option value="Area">Area</option>
	  <option value="Territory">Territory</option>
	</select></p>
	<p><label for="shortcuts">Enable keyboard shortcuts (w a s d and e to enter): </label>
	<input type="checkbox" id="shortcuts">
	</p>
	<p>Canvas size: 
	<input type="number" id="canvassize" step="100" value=700>
	Side length: 
	<input type="number" id="sidelength" step="1" value=13>
	<button onclick="sb.changesize()">Change.</button>
	</p>
	<p>	Game record: <input type="text" id="board_moves" value='9;'> 
	<button class="btn btn-primary" onclick="sb.loadGame()">Load game record (paste first).</button> </p>
{{end}}

{{define "chat"}}
	<div id="chat">
		<div id="log"></div>
		<form id="form">
			<input type="text" id="msg" size="32"/>
			<input type="submit" value="Send" />
		</form>
	</div>
{{end}}
{{define "localchat"}}
	<p><form id="commentform">
		Local chat: 
		<input type="text" id="comment" size="32"/>
		<input type="submit" value="Send" />
	</form></p>
{{end}}
{{define "chatHeader"}}
<script type="text/javascript">
function appendLog(item) {
	var log = document.getElementById("log");
	var doScroll = log.scrollTop > log.scrollHeight - log.clientHeight - 1;
	log.appendChild(item);
	if (doScroll) {
			log.scrollTop = log.scrollHeight - log.clientHeight;
	}
}
window.onload = function () {
		var conn;
		var msg = document.getElementById("msg");
		document.getElementById("form").onsubmit = function () {
				if (!conn) {
						return false;
				}
				if (!msg.value) {
						return false;
				}
				conn.send(msg.value);
				msg.value = "";
				return false;
		};

		if (window["WebSocket"]) {
				conn = new WebSocket("ws://" + document.location.host + "/ws");
				conn.onclose = function (evt) {
						var item = document.createElement("div");
						item.innerHTML = "<b>Connection closed.</b>";
						appendLog(item);
				};
				conn.onmessage = function (evt) {
						var messages = evt.data.split('\n');
						for (var i = 0; i < messages.length; i++) {
								var item = document.createElement("div");
								item.innerText = messages[i];
								appendLog(item);
						}
				};
		} else {
				var item = document.createElement("div");
				item.innerHTML = "<b>Your browser does not support WebSockets.</b>";
				appendLog(item);
		}
};
</script>
{{end}}
{{define "crosshair"}}
document.body.addEventListener("keydown", keyDown, false);
function keyDown(e) {
	if (document.getElementById("shortcuts")==null || typeof(document.getElementById("shortcuts"))=="undefined"){
		document.removeEventListener("keydown", keyDown);
	} else if (document.getElementById("shortcuts").checked){
		var k = e.keyCode; //enter is 13
		if(k==83) { //s
			document.getElementById("y").value=parseInt(document.getElementById("y").value)+1;
			document.getElementById("x").value=parseInt(document.getElementById("x").value)-1;
		} else if (k==65){ //a
			document.getElementById("x").value=parseInt(document.getElementById("x").value)-1;
		} else if (k==80){ //p
			sb.plotInfluence();
			return;
		} else if (k==68){ //d
			document.getElementById("x").value=parseInt(document.getElementById("x").value)+1;
		} else if (k==69){ //e,	|| k==13 conflicts with enter for buttons
			var docx=parseInt(document.getElementById("x").value);
			var docy=parseInt(document.getElementById("y").value);
			sb.handleClick(docx,docy);
		} else if (k==87){ //w
			document.getElementById("y").value=parseInt(document.getElementById("y").value)-1;
			document.getElementById("x").value=parseInt(document.getElementById("x").value)+1;
		} else {
			return 0;
		}
		crosshair();
	}
}
function crosshair(){
	sb.placeMoves();
	var docx=parseInt(document.getElementById("x").value);
	var docy=parseInt(document.getElementById("y").value);
	if (sb.board.tg.has(docx,docy)){
		var st=sb.triangles[docy][docx];
		sb.drawer.line(st.pixX-sb.unitSize,st.pixY,st.pixX+sb.unitSize,st.pixY,"#909",5);
		sb.drawer.line(st.pixX,st.pixY-sb.unitSize,st.pixX,st.pixY+sb.unitSize,"#909",5);
	}
};
{{end}}

